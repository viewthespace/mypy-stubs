from airflow.contrib.hooks.qubole_hook import COMMAND_ARGS as COMMAND_ARGS, HYPHEN_ARGS as HYPHEN_ARGS, POSITIONAL_ARGS as POSITIONAL_ARGS, QuboleHook as QuboleHook, flatten_list as flatten_list
from airflow.hooks.base_hook import BaseHook as BaseHook
from airflow.models.baseoperator import BaseOperator as BaseOperator, BaseOperatorLink as BaseOperatorLink
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.utils.decorators import apply_defaults as apply_defaults
from typing import Any, Iterable

class QDSLink(BaseOperatorLink):
    name: str
    def get_link(self, operator, dttm): ...

class QuboleOperator(BaseOperator):
    template_fields: Iterable[str]
    template_ext: Iterable[str]
    ui_color: str
    ui_fgcolor: str
    qubole_hook_allowed_args_list: Any
    operator_extra_links: Any
    args: Any
    kwargs: Any
    hook: Any
    on_failure_callback: Any
    on_retry_callback: Any
    def __init__(self, qubole_conn_id: str = ..., *args, **kwargs) -> None: ...
    def execute(self, context): ...
    def on_kill(self, ti: Any | None = ...) -> None: ...
    def get_results(self, ti: Any | None = ..., fp: Any | None = ..., inline: bool = ..., delim: Any | None = ..., fetch: bool = ...): ...
    def get_log(self, ti): ...
    def get_jobs_id(self, ti): ...
    def get_hook(self): ...
    def __getattribute__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
