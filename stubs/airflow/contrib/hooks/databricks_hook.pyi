from airflow.exceptions import AirflowException as AirflowException
from airflow.hooks.base_hook import BaseHook as BaseHook
from requests.auth import AuthBase
from typing import Any

RESTART_CLUSTER_ENDPOINT: Any
START_CLUSTER_ENDPOINT: Any
TERMINATE_CLUSTER_ENDPOINT: Any
RUN_NOW_ENDPOINT: Any
SUBMIT_RUN_ENDPOINT: Any
GET_RUN_ENDPOINT: Any
CANCEL_RUN_ENDPOINT: Any
USER_AGENT_HEADER: Any

class DatabricksHook(BaseHook):
    databricks_conn_id: Any
    databricks_conn: Any
    timeout_seconds: Any
    retry_limit: Any
    retry_delay: Any
    def __init__(self, databricks_conn_id: str = ..., timeout_seconds: int = ..., retry_limit: int = ..., retry_delay: float = ...) -> None: ...
    def run_now(self, json): ...
    def submit_run(self, json): ...
    def get_run_page_url(self, run_id): ...
    def get_run_state(self, run_id): ...
    def cancel_run(self, run_id) -> None: ...
    def restart_cluster(self, json) -> None: ...
    def start_cluster(self, json) -> None: ...
    def terminate_cluster(self, json) -> None: ...

RUN_LIFE_CYCLE_STATES: Any

class RunState:
    life_cycle_state: Any
    result_state: Any
    state_message: Any
    def __init__(self, life_cycle_state, result_state, state_message) -> None: ...
    @property
    def is_terminal(self): ...
    @property
    def is_successful(self): ...
    def __eq__(self, other): ...

class _TokenAuth(AuthBase):
    token: Any
    def __init__(self, token) -> None: ...
    def __call__(self, r): ...
