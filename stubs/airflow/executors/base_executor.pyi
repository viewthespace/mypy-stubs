from airflow.configuration import conf as conf
from airflow.settings import Stats as Stats
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.state import State as State
from typing import Any

PARALLELISM: Any

class BaseExecutor(LoggingMixin):
    parallelism: Any
    queued_tasks: Any
    running: Any
    event_buffer: Any
    def __init__(self, parallelism=...) -> None: ...
    def start(self) -> None: ...
    def queue_command(self, simple_task_instance, command, priority: int = ..., queue: Any | None = ...) -> None: ...
    def queue_task_instance(self, task_instance, mark_success: bool = ..., pickle_id: Any | None = ..., ignore_all_deps: bool = ..., ignore_depends_on_past: bool = ..., ignore_task_deps: bool = ..., ignore_ti_state: bool = ..., pool: Any | None = ..., cfg_path: Any | None = ...) -> None: ...
    def has_task(self, task_instance): ...
    def sync(self) -> None: ...
    def heartbeat(self) -> None: ...
    def trigger_tasks(self, open_slots): ...
    def change_state(self, key, state) -> None: ...
    def fail(self, key) -> None: ...
    def success(self, key) -> None: ...
    def get_event_buffer(self, dag_ids: Any | None = ...): ...
    def execute_async(self, key, command, queue: Any | None = ..., executor_config: Any | None = ...) -> None: ...
    def end(self) -> None: ...
    def terminate(self) -> None: ...
