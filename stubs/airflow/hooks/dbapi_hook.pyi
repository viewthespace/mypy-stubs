from airflow.exceptions import AirflowException as AirflowException
from airflow.hooks.base_hook import BaseHook as BaseHook
from builtins import str
from typing import Any, Optional

class DbApiHook(BaseHook):
    conn_name_attr: Optional[str]
    default_conn_name: str
    supports_autocommit: bool
    connector: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def get_conn(self): ...
    def get_uri(self): ...
    def get_sqlalchemy_engine(self, engine_kwargs: Any | None = ...): ...
    def get_pandas_df(self, sql, parameters: Any | None = ...): ...
    def get_records(self, sql, parameters: Any | None = ...): ...
    def get_first(self, sql, parameters: Any | None = ...): ...
    def run(self, sql, autocommit: bool = ..., parameters: Any | None = ...) -> None: ...
    def set_autocommit(self, conn, autocommit) -> None: ...
    def get_autocommit(self, conn): ...
    def get_cursor(self): ...
    def insert_rows(self, table, rows, target_fields: Any | None = ..., commit_every: int = ..., replace: bool = ..., **kwargs) -> None: ...
    def bulk_dump(self, table, tmp_file) -> None: ...
    def bulk_load(self, table, tmp_file) -> None: ...
