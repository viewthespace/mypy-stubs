from airflow import api as api, jobs as jobs, settings as settings
from airflow.configuration import conf as conf, get_airflow_home as get_airflow_home
from airflow.exceptions import AirflowException as AirflowException, AirflowWebServerTimeout as AirflowWebServerTimeout
from airflow.executors import get_default_executor as get_default_executor
from airflow.models import Connection as Connection, DAG as DAG, DagBag as DagBag, DagModel as DagModel, DagPickle as DagPickle, DagRun as DagRun, TaskInstance as TaskInstance, Variable as Variable
from airflow.ti_deps.dep_context import DepContext as DepContext, SCHEDULER_QUEUED_DEPS as SCHEDULER_QUEUED_DEPS
from airflow.typing_compat import Protocol as Protocol
from airflow.utils import db as db
from airflow.utils.dot_renderer import render_dag as render_dag
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin, redirect_stderr as redirect_stderr, redirect_stdout as redirect_stdout
from airflow.utils.net import get_hostname as get_hostname
from airflow.www.app import cached_app as cached_app, create_app as create_app
from airflow.www_rbac.app import cached_appbuilder as cached_appbuilder
from typing import Any

api_module: Any
api_client: Any
log: Any
DAGS_FOLDER: Any

def sigint_handler(sig, frame) -> None: ...
def sigquit_handler(sig, frame) -> None: ...
def setup_logging(filename): ...
def setup_locations(process, pid: Any | None = ..., stdout: Any | None = ..., stderr: Any | None = ..., log: Any | None = ...): ...
def process_subdir(subdir): ...
def get_dag(args): ...
def get_dags(args): ...
def backfill(args, dag: Any | None = ...) -> None: ...
def trigger_dag(args) -> None: ...
def delete_dag(args) -> None: ...
def pool(args): ...
def pool_import_helper(filepath): ...
def pool_export_helper(filepath): ...
def variables(args) -> None: ...
def import_helper(filepath) -> None: ...
def export_helper(filepath) -> None: ...
def pause(args) -> None: ...
def unpause(args) -> None: ...
def set_is_paused(is_paused, args) -> None: ...
def show_dag(args) -> None: ...
def run(args, dag: Any | None = ...) -> None: ...
def task_failed_deps(args) -> None: ...
def task_state(args) -> None: ...
def dag_state(args) -> None: ...
def next_execution(args) -> None: ...
def rotate_fernet_key(args) -> None: ...
def list_dags(args) -> None: ...
def list_tasks(args, dag: Any | None = ...) -> None: ...
def test(args, dag: Any | None = ...) -> None: ...
def render(args) -> None: ...
def clear(args) -> None: ...

class GunicornMonitor(LoggingMixin):
    gunicorn_master_proc: Any
    num_workers_expected: Any
    master_timeout: Any
    worker_refresh_interval: Any
    worker_refresh_batch_size: Any
    reload_on_plugin_change: Any
    def __init__(self, gunicorn_master_pid, num_workers_expected, master_timeout, worker_refresh_interval, worker_refresh_batch_size, reload_on_plugin_change) -> None: ...
    def start(self): ...

def webserver(args) -> None: ...
def scheduler(args) -> None: ...
def serve_logs(args): ...
def worker(args) -> None: ...
def initdb(args) -> None: ...
def resetdb(args) -> None: ...
def shell(args) -> None: ...
def upgradedb(args) -> None: ...
def checkdb(args) -> None: ...
def version(args) -> None: ...

alternative_conn_specs: Any

def connections(args) -> None: ...
def flower(args) -> None: ...
def kerberos(args) -> None: ...
def create_user(args) -> None: ...
def delete_user(args) -> None: ...
def list_users(args) -> None: ...
def list_dag_runs(args, dag: Any | None = ...): ...
def sync_perm(args) -> None: ...
def config(args) -> None: ...

class Anonymizer:
    def process_path(self, value) -> None: ...
    def process_username(self, value) -> None: ...
    def process_url(self, value) -> None: ...

class NullAnonymizer(Anonymizer):
    process_path: Any
    process_username: Any
    process_url: Any

class PiiAnonymizer(Anonymizer):
    def __init__(self) -> None: ...
    def process_path(self, value): ...
    def process_username(self, value): ...
    def process_url(self, value): ...

class OperatingSystem:
    WINDOWS: str
    LINUX: str
    MACOSX: str
    CYGWIN: str
    @staticmethod
    def get_current(): ...

class Architecture:
    X86_64: str
    X86: str
    PPC: str
    ARM: str
    @staticmethod
    def get_current(): ...

class AirflowInfo:
    airflow_version: Any
    system: Any
    tools: Any
    paths: Any
    config: Any
    def __init__(self, anonymizer) -> None: ...

class SystemInfo:
    operating_system: Any
    arch: Any
    uname: Any
    locale: Any
    python_location: Any
    python_version: Any
    def __init__(self, anonymizer) -> None: ...

class PathsInfo:
    airflow_home: Any
    system_path: Any
    python_path: Any
    airflow_on_path: Any
    def __init__(self, anonymizer) -> None: ...

class ConfigInfo:
    executor: Any
    dags_folder: Any
    plugins_folder: Any
    base_log_folder: Any
    sql_alchemy_conn: Any
    def __init__(self, anonymizer) -> None: ...

class ToolsInfo:
    git_version: Any
    ssh_version: Any
    kubectl_version: Any
    gcloud_version: Any
    cloud_sql_proxy_version: Any
    mysql_version: Any
    sqlite3_version: Any
    psql_version: Any
    def __init__(self, anonymize) -> None: ...

class FileIoException(Exception): ...

def info(args) -> None: ...

class Arg:
    flags: Any
    help: Any
    action: Any
    default: Any
    nargs: Any
    type: Any
    choices: Any
    metavar: Any
    def __init__(self, flags: Any | None = ..., help: Any | None = ..., action: Any | None = ..., default: Any | None = ..., nargs: Any | None = ..., type: Any | None = ..., choices: Any | None = ..., metavar: Any | None = ...) -> None: ...

class CLIFactory:
    args: Any
    subparsers: Any
    subparsers_dict: Any
    dag_subparsers: Any
    @classmethod
    def get_parser(cls, dag_parser: bool = ...): ...

def get_parser(): ...
def py2_deprecation_waring(): ...
