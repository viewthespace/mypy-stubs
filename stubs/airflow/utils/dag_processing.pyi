import abc
import enum
from abc import abstractmethod
from airflow.configuration import conf as conf
from airflow.dag.base_dag import BaseDag as BaseDag, BaseDagBag as BaseDagBag
from airflow.exceptions import AirflowException as AirflowException
from airflow.models import errors as errors
from airflow.settings import STORE_DAG_CODE as STORE_DAG_CODE, STORE_SERIALIZED_DAGS as STORE_SERIALIZED_DAGS, Stats as Stats
from airflow.utils import timezone as timezone
from airflow.utils.db import provide_session as provide_session
from airflow.utils.helpers import reap_process_group as reap_process_group
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.mixins import MultiprocessingStartMethodMixin as MultiprocessingStartMethodMixin
from airflow.utils.state import State as State
from typing import Any

log: Any

class SimpleDag(BaseDag):
    def __init__(self, dag, pickle_id: Any | None = ...) -> None: ...
    @property
    def dag_id(self): ...
    @property
    def task_ids(self): ...
    @property
    def full_filepath(self): ...
    @property
    def concurrency(self): ...
    @property
    def pickle_id(self): ...
    @property
    def task_special_args(self): ...
    def get_task_special_arg(self, task_id, special_arg_name): ...

class SimpleTaskInstance:
    def __init__(self, ti) -> None: ...
    @property
    def dag_id(self): ...
    @property
    def task_id(self): ...
    @property
    def execution_date(self): ...
    @property
    def start_date(self): ...
    @property
    def end_date(self): ...
    @property
    def try_number(self): ...
    @property
    def state(self): ...
    @property
    def pool(self): ...
    @property
    def priority_weight(self): ...
    @property
    def queue(self): ...
    @property
    def key(self): ...
    @property
    def executor_config(self): ...
    def construct_task_instance(self, session: Any | None = ..., lock_for_update: bool = ...): ...

class SimpleDagBag(BaseDagBag):
    simple_dags: Any
    dag_id_to_simple_dag: Any
    def __init__(self, simple_dags) -> None: ...
    @property
    def dag_ids(self): ...
    def get_dag(self, dag_id): ...

def correct_maybe_zipped(fileloc): ...

COMMENT_PATTERN: Any

def list_py_file_paths(directory, safe_mode=..., include_examples: Any | None = ...): ...

class AbstractDagFileProcessor(metaclass=abc.ABCMeta):
    __metaclass__: Any
    @abstractmethod
    def start(self): ...
    @abstractmethod
    def terminate(self, sigkill: bool = ...): ...
    @property
    @abstractmethod
    def pid(self): ...
    @property
    @abstractmethod
    def exit_code(self): ...
    @property
    @abstractmethod
    def done(self): ...
    @property
    @abstractmethod
    def result(self): ...
    @property
    @abstractmethod
    def start_time(self): ...
    @property
    @abstractmethod
    def file_path(self): ...

DagParsingStat: Any
DagFileStat: Any

class DagParsingSignal(enum.Enum):
    AGENT_HEARTBEAT: str
    TERMINATE_MANAGER: str
    END_MANAGER: str

class DagFileProcessorAgent(LoggingMixin, MultiprocessingStartMethodMixin):
    def __init__(self, dag_directory, file_paths, max_runs, processor_factory, processor_timeout, dag_ids, pickle_dags, async_mode) -> None: ...
    def start(self) -> None: ...
    def heartbeat(self) -> None: ...
    def wait_until_finished(self) -> None: ...
    def harvest_simple_dags(self): ...
    @property
    def file_paths(self): ...
    @property
    def done(self): ...
    @property
    def all_files_processed(self): ...
    def terminate(self) -> None: ...
    def end(self) -> None: ...

class DagFileProcessorManager(LoggingMixin):
    print_stats_interval: Any
    last_dag_dir_refresh_time: Any
    last_stat_print_time: Any
    dag_dir_list_interval: Any
    def __init__(self, dag_directory, file_paths, max_runs, processor_factory, processor_timeout, signal_conn, dag_ids, pickle_dags, async_mode: bool = ...) -> None: ...
    def start(self) -> None: ...
    def clear_nonexistent_import_errors(self, session) -> None: ...
    @property
    def file_paths(self): ...
    def get_pid(self, file_path): ...
    def get_all_pids(self): ...
    def get_last_runtime(self, file_path): ...
    def get_last_dag_count(self, file_path): ...
    def get_last_error_count(self, file_path): ...
    def get_last_finish_time(self, file_path): ...
    def get_start_time(self, file_path): ...
    def get_run_count(self, file_path): ...
    def set_file_paths(self, new_file_paths) -> None: ...
    def wait_until_finished(self) -> None: ...
    def collect_results(self): ...
    def start_new_processes(self) -> None: ...
    def prepare_file_path_queue(self) -> None: ...
    def max_runs_reached(self): ...
    def terminate(self) -> None: ...
    def end(self): ...
    def emit_metrics(self) -> None: ...
