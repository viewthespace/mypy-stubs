from airflow import models as models
from airflow.exceptions import AirflowException as AirflowException
from airflow.utils.db import provide_session as provide_session
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.www_rbac.app import appbuilder as appbuilder
from airflow.www_rbac.utils import CustomSQLAInterface as CustomSQLAInterface
from flask_appbuilder.security.sqla.manager import SecurityManager
from typing import Any

EXISTING_ROLES: Any

class AirflowSecurityManager(SecurityManager, LoggingMixin):
    VIEWER_VMS: Any
    USER_VMS: Any
    OP_VMS: Any
    VIEWER_PERMS: Any
    USER_PERMS: Any
    OP_PERMS: Any
    DAG_VMS: Any
    WRITE_DAG_PERMS: Any
    READ_DAG_PERMS: Any
    DAG_PERMS: Any
    ROLE_CONFIGS: Any
    def __init__(self, appbuilder) -> None: ...
    def init_role(self, role_name, role_vms, role_perms) -> None: ...
    def get_user_roles(self, user: Any | None = ...): ...
    def get_all_permissions_views(self): ...
    def get_accessible_dag_ids(self, username: Any | None = ...): ...
    def has_access(self, permission, view_name, user: Any | None = ...): ...
    def has_all_dags_access(self): ...
    def clean_perms(self) -> None: ...
    def create_custom_dag_permission_view(self, session: Any | None = ...) -> None: ...
    def update_admin_perm_view(self) -> None: ...
    def sync_roles(self) -> None: ...
    def sync_perm_for_dag(self, dag_id, access_control: Any | None = ...) -> None: ...
    def create_perm_vm_for_all_dag(self) -> None: ...
