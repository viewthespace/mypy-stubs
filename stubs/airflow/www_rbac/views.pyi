from airflow import configuration as configuration, jobs as jobs, models as models, settings as settings
from airflow.api.common.experimental.mark_tasks import set_dag_run_state_to_failed as set_dag_run_state_to_failed, set_dag_run_state_to_success as set_dag_run_state_to_success
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from airflow.models import Connection as Connection, DagModel as DagModel, DagRun as DagRun, DagTag as DagTag, Log as Log, SlaMiss as SlaMiss, TaskFail as TaskFail, XCom as XCom, errors as errors
from airflow.models.dagcode import DagCode as DagCode
from airflow.settings import STATE_COLORS as STATE_COLORS, STORE_SERIALIZED_DAGS as STORE_SERIALIZED_DAGS
from airflow.ti_deps.dep_context import DepContext as DepContext, RUNNING_DEPS as RUNNING_DEPS, SCHEDULER_QUEUED_DEPS as SCHEDULER_QUEUED_DEPS
from airflow.utils import timezone as timezone
from airflow.utils.dates import infer_time_unit as infer_time_unit, scale_time_units as scale_time_units
from airflow.utils.db import create_session as create_session, provide_session as provide_session
from airflow.utils.helpers import alchemy_to_dict as alchemy_to_dict, render_log_filename as render_log_filename
from airflow.utils.state import State as State
from airflow.www_rbac.app import app as app, appbuilder as appbuilder
from airflow.www_rbac.decorators import action_logging as action_logging, gzipped as gzipped, has_dag_access as has_dag_access
from airflow.www_rbac.forms import ConnectionForm as ConnectionForm, DagRunForm as DagRunForm, DateTimeForm as DateTimeForm, DateTimeWithNumRunsForm as DateTimeWithNumRunsForm, DateTimeWithNumRunsWithDagRunsForm as DateTimeWithNumRunsWithDagRunsForm
from airflow.www_rbac.widgets import AirflowModelListWidget as AirflowModelListWidget
from flask_appbuilder import BaseView, ModelView
from flask_appbuilder.models.sqla.filters import BaseFilter
from typing import Any

PAGE_SIZE: Any
FILTER_TAGS_COOKIE: str
FILTER_STATUS_COOKIE: str
dagbag: Any

def get_safe_url(url): ...
def get_date_time_num_runs_dag_runs_form_data(request, session, dag): ...
def circles(error): ...
def show_traceback(error): ...

class AirflowBaseView(BaseView):
    route_base: str
    extra_args: Any
    def render_template(self, *args, **kwargs): ...

class Airflow(AirflowBaseView):
    def health(self): ...
    def index(self): ...
    def dag_stats(self, session: Any | None = ...): ...
    def task_stats(self, session: Any | None = ...): ...
    def last_dagruns(self, session: Any | None = ...): ...
    def code(self, session: Any | None = ...): ...
    def dag_details(self, session: Any | None = ...): ...
    def pickle_info(self): ...
    def rendered(self, session: Any | None = ...): ...
    def get_logs_with_metadata(self, session: Any | None = ...): ...
    def log(self, session: Any | None = ...): ...
    def elasticsearch(self, session: Any | None = ...): ...
    def task(self): ...
    def xcom(self, session: Any | None = ...): ...
    def run(self): ...
    def delete(self): ...
    def trigger(self, session: Any | None = ...): ...
    def clear(self): ...
    def dagrun_clear(self): ...
    def blocked(self, session: Any | None = ...): ...
    def dagrun_failed(self): ...
    def dagrun_success(self): ...
    def failed(self): ...
    def success(self): ...
    def tree(self, session: Any | None = ...): ...
    def graph(self, session: Any | None = ...): ...
    def duration(self, session: Any | None = ...): ...
    def tries(self, session: Any | None = ...): ...
    def landing_times(self, session: Any | None = ...): ...
    def paused(self, session: Any | None = ...): ...
    def refresh(self, session: Any | None = ...): ...
    def gantt(self, session: Any | None = ...): ...
    def extra_links(self): ...
    def task_instances(self, session: Any | None = ...): ...

class VersionView(AirflowBaseView):
    default_view: str
    def version(self): ...

class ConfigurationView(AirflowBaseView):
    default_view: str
    def conf(self): ...

class DagFilter(BaseFilter):
    def apply(self, query, func): ...

class AirflowModelView(ModelView):
    list_widget: Any
    page_size: Any
    CustomSQLAInterface: Any

class SlaMissModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    add_columns: Any
    edit_columns: Any
    search_columns: Any
    base_order: Any
    base_filters: Any
    formatters_columns: Any

class XComModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    search_columns: Any
    list_columns: Any
    base_order: Any
    base_filters: Any
    formatters_columns: Any
    def action_muldelete(self, items): ...
    def pre_add(self, item) -> None: ...
    def pre_update(self, item) -> None: ...

class ConnectionModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    extra_fields: Any
    list_columns: Any
    add_columns: Any
    edit_columns: Any
    add_form: Any
    edit_form: Any
    add_template: str
    edit_template: str
    base_order: Any
    def action_muldelete(self, items): ...
    def process_form(self, form, is_created) -> None: ...
    def prefill_form(self, form, pk) -> None: ...

class PoolModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    add_columns: Any
    edit_columns: Any
    base_order: Any
    def action_muldelete(self, items): ...
    def pool_link(attr): ...
    def fused_slots(attr): ...
    def fqueued_slots(attr): ...
    formatters_columns: Any
    validators_columns: Any

class VariableModelView(AirflowModelView):
    route_base: str
    list_template: str
    edit_template: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    add_columns: Any
    edit_columns: Any
    search_columns: Any
    base_order: Any
    def hidden_field_formatter(attr): ...
    formatters_columns: Any
    validators_columns: Any
    def prefill_form(self, form, id) -> None: ...
    def action_muldelete(self, items): ...
    def action_varexport(self, items): ...
    def varimport(self): ...

class JobModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    search_columns: Any
    base_order: Any
    base_filters: Any
    formatters_columns: Any

class DagRunModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    add_columns: Any
    list_columns: Any
    search_columns: Any
    base_order: Any
    base_filters: Any
    add_form: Any
    edit_form: Any
    formatters_columns: Any
    def action_muldelete(self, items, session: Any | None = ...): ...
    def action_set_running(self, drs, session: Any | None = ...): ...
    def action_set_failed(self, drs, session: Any | None = ...): ...
    def action_set_success(self, drs, session: Any | None = ...): ...

class LogModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    search_columns: Any
    base_order: Any
    base_filters: Any
    formatters_columns: Any

class TaskRescheduleModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    search_columns: Any
    base_order: Any
    base_filters: Any
    def duration_f(attr): ...
    formatters_columns: Any

class TaskInstanceModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    page_size: Any
    list_columns: Any
    order_columns: Any
    search_columns: Any
    base_order: Any
    base_filters: Any
    def log_url_formatter(attr): ...
    def duration_f(attr): ...
    formatters_columns: Any
    def action_clear(self, tis, session: Any | None = ...): ...
    def set_task_instance_state(self, tis, target_state, session: Any | None = ...) -> None: ...
    def action_set_running(self, tis): ...
    def action_set_failed(self, tis): ...
    def action_set_success(self, tis): ...
    def action_set_retry(self, tis): ...
    def get_one(self, id): ...

class DagModelView(AirflowModelView):
    route_base: str
    datamodel: Any
    base_permissions: Any
    list_columns: Any
    formatters_columns: Any
    base_filters: Any
    def get_query(self): ...
    def get_count_query(self): ...
    def autocomplete(self, session: Any | None = ...): ...
