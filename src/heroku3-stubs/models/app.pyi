from ..models import BaseResource as BaseResource, Organization as Organization, Stack as Stack, User as User
from ..rendezvous import Rendezvous as Rendezvous
from ..structures import DynoListResource as DynoListResource
from .addon import Addon as Addon
from .build import Build as Build
from .collaborator import Collaborator as Collaborator
from .configvars import ConfigVars as ConfigVars
from .domain import Domain as Domain
from .dyno import Dyno as Dyno
from .formation import Formation as Formation
from .logdrain import LogDrain as LogDrain
from .logsession import LogSession as LogSession
from .region import Region as Region
from .release import Release as Release
from heroku3.models.slug import Slug as Slug
from pprint import pprint as pprint
from typing import Any

class App(BaseResource):
    def __init__(self) -> None: ...
    def addons(self, **kwargs): ...
    def builds(self, **kwargs): ...
    def delete(self): ...
    def add_collaborator(self, user_id_or_email, silent: bool = ...): ...
    def remove_collaborator(self, id_or_email): ...
    def install_addon(self, plan_id_or_name, config: Any | None = ...): ...
    def remove_addon(self, id): ...
    def collaborators(self, **kwargs): ...
    def config(self): ...
    def update_config(self, config): ...
    def get_domain(self, hostname_or_id): ...
    def domains(self, **kwargs): ...
    def add_domain(self, hostname): ...
    def remove_domain(self, hostname): ...
    def dynos(self, **kwargs): ...
    def kill_dyno(self, dyno_id_or_name): ...
    def restart(self): ...
    def run_command_detached(self, command, size: Any | None = ..., env: Any | None = ..., time_to_live: Any | None = ..., type: Any | None = ...): ...
    def run_command(self, command, attach: bool = ..., printout: bool = ..., size: Any | None = ..., env: Any | None = ..., time_to_live: Any | None = ..., type: Any | None = ...): ...
    def process_formation(self, **kwargs): ...
    def batch_scale_formation_processes(self, updates): ...
    def batch_resize_formation_processes(self, updates): ...
    def scale_formation_process(self, formation_id_or_name, quantity): ...
    def resize_formation_process(self, formation_id_or_name, size): ...
    @property
    def info(self): ...
    def labs(self, **kwargs): ...
    def features(self, **kwargs): ...
    def disable_feature(self, id_or_name): ...
    def enable_feature(self, id_or_name): ...
    def update_feature(self, id_or_name, enabled): ...
    def logdrains(self, **kwargs): ...
    def create_logdrain(self, url): ...
    def remove_logdrain(self, id_or_url): ...
    def rename(self, name): ...
    def transfers(self, **kwargs): ...
    def create_transfer(self, recipient_id_or_name): ...
    def delete_transfer(self, id): ...
    def enable_maintenance_mode(self): ...
    def disable_maintenance_mode(self): ...
    def update(self, maintenance: bool = ..., name: Any | None = ...): ...
    def destroy(self): ...
    def stream_log(self, dyno: Any | None = ..., lines: int = ..., source: Any | None = ..., timeout: bool = ...): ...
    def get_log(self, dyno: Any | None = ..., lines: int = ..., source: Any | None = ..., timeout: bool = ...): ...
    def create_release(self, slug_id): ...
    def releases(self, **kwargs): ...
    def rollback(self, release): ...
    def update_buildpacks(self, buildpack_urls): ...
    def slug(self, slug_id): ...

class AppTransfer(BaseResource):
    app: Any
    def __init__(self) -> None: ...
    def update(self, state): ...
    def delete(self): ...

class AppFeature(BaseResource):
    app: Any
    def __init__(self) -> None: ...
    def update(self, enabled): ...
    def enable(self): ...
    def disable(self): ...
