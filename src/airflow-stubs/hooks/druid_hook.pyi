from airflow.exceptions import AirflowException as AirflowException
from airflow.hooks.base_hook import BaseHook as BaseHook
from airflow.hooks.dbapi_hook import DbApiHook as DbApiHook
from typing import Any

class DruidHook(BaseHook):
    druid_ingest_conn_id: Any
    timeout: Any
    max_ingestion_time: Any
    header: Any
    def __init__(self, druid_ingest_conn_id: str = ..., timeout: int = ..., max_ingestion_time: Any | None = ...) -> None: ...
    def get_conn_url(self): ...
    def get_auth(self): ...
    def submit_indexing_job(self, json_index_spec) -> None: ...

class DruidDbApiHook(DbApiHook):
    conn_name_attr: str
    default_conn_name: str
    supports_autocommit: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def get_conn(self): ...
    def get_uri(self): ...
    def set_autocommit(self, conn, autocommit) -> None: ...
    def insert_rows(self, table, rows, target_fields: Any | None = ..., commit_every: int = ...) -> None: ...
