import pendulum
from airflow import settings as settings
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, AirflowFailException as AirflowFailException, AirflowRescheduleException as AirflowRescheduleException, AirflowSkipException as AirflowSkipException, AirflowTaskTimeout as AirflowTaskTimeout
from airflow.models.base import Base as Base, ID_LEN as ID_LEN
from airflow.models.log import Log as Log
from airflow.models.pool import Pool as Pool
from airflow.models.taskfail import TaskFail as TaskFail
from airflow.models.taskreschedule import TaskReschedule as TaskReschedule
from airflow.models.variable import Variable as Variable
from airflow.models.xcom import XCOM_RETURN_KEY as XCOM_RETURN_KEY, XCom as XCom
from airflow.sentry import Sentry as Sentry
from airflow.settings import STORE_SERIALIZED_DAGS as STORE_SERIALIZED_DAGS, Stats as Stats
from airflow.ti_deps.dep_context import DepContext as DepContext, REQUEUEABLE_DEPS as REQUEUEABLE_DEPS, RUNNING_DEPS as RUNNING_DEPS
from airflow.utils import timezone as timezone
from airflow.utils.db import provide_session as provide_session
from airflow.utils.email import send_email as send_email
from airflow.utils.helpers import is_container as is_container
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.net import get_hostname as get_hostname
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from airflow.utils.state import State as State
from airflow.utils.timeout import timeout as timeout
import datetime as dt
from sqlalchemy.orm.session import Session as Session
from typing import Any, Optional

def clear_task_instances(tis, session, activate_dag_runs: bool = ..., dag: Any | None = ...) -> None: ...

class TaskInstance(Base, LoggingMixin):
    __tablename__: str
    task_id: str
    dag_id: str
    execution_date: dt.datetime
    start_date: dt.datetime
    end_date: dt.datetime
    duration: float
    state: str
    max_tries: int
    hostname: str
    unixname: str
    job_id: int
    pool: str
    pool_slots: int
    queue: str
    priority_weight: int
    operator: str
    queued_dttm: dt.datetime
    pid: int
    executor_config: Any
    __table_args__: Any
    task: Any
    raw: bool
    def __init__(self, task, execution_date, state: Any | None = ...) -> None: ...
    test_mode: bool
    def init_on_load(self) -> None: ...
    @property
    def try_number(self): int
    @try_number.setter
    def try_number(self, value) -> None: ...
    @property
    def prev_attempted_tries(self): ...
    @property
    def next_try_number(self): ...
    def command(self, mark_success: bool = ..., ignore_all_deps: bool = ..., ignore_depends_on_past: bool = ..., ignore_task_deps: bool = ..., ignore_ti_state: bool = ..., local: bool = ..., pickle_id: Any | None = ..., raw: bool = ..., job_id: Any | None = ..., pool: Any | None = ..., cfg_path: Any | None = ...): ...
    def command_as_list(self, mark_success: bool = ..., ignore_all_deps: bool = ..., ignore_task_deps: bool = ..., ignore_depends_on_past: bool = ..., ignore_ti_state: bool = ..., local: bool = ..., pickle_id: Any | None = ..., raw: bool = ..., job_id: Any | None = ..., pool: Any | None = ..., cfg_path: Any | None = ...): ...
    @staticmethod
    def generate_command(dag_id, task_id, execution_date, mark_success: bool = ..., ignore_all_deps: bool = ..., ignore_depends_on_past: bool = ..., ignore_task_deps: bool = ..., ignore_ti_state: bool = ..., local: bool = ..., pickle_id: Any | None = ..., file_path: Any | None = ..., raw: bool = ..., job_id: Any | None = ..., pool: Any | None = ..., cfg_path: Any | None = ...): ...
    @property
    def log_filepath(self): ...
    @property
    def log_url(self): ...
    @property
    def mark_success_url(self): ...
    def current_state(self, session: Any | None = ...): ...
    def error(self, session: Any | None = ...) -> None: ...
    def refresh_from_db(self, session: Any | None = ..., lock_for_update: bool = ...) -> None: ...
    run_as_user: Any
    def refresh_from_task(self, task, pool_override: Any | None = ...) -> None: ...
    def clear_xcom_data(self, session: Any | None = ...) -> None: ...
    @property
    def key(self): ...
    def set_state(self, state, session: Any | None = ..., commit: bool = ...) -> None: ...
    @property
    def is_premature(self): ...
    def are_dependents_done(self, session: Any | None = ...): ...
    @property
    def previous_ti(self) -> Optional[TaskInstance]: ...
    @property
    def previous_ti_success(self) -> Optional[TaskInstance]: ...
    @property
    def previous_execution_date_success(self) -> Optional[pendulum.datetime]: ...
    @property
    def previous_start_date_success(self) -> Optional[pendulum.datetime]: ...
    def are_dependencies_met(self, dep_context: Any | None = ..., session: Any | None = ..., verbose: bool = ...): ...
    def get_failed_dep_statuses(self, dep_context: Any | None = ..., session: Any | None = ...) -> None: ...
    def next_retry_datetime(self): ...
    def ready_for_retry(self): ...
    def pool_full(self, session): ...
    def get_dagrun(self, session): ...
    def run(self, verbose: bool = ..., ignore_all_deps: bool = ..., ignore_depends_on_past: bool = ..., ignore_task_deps: bool = ..., ignore_ti_state: bool = ..., mark_success: bool = ..., test_mode: bool = ..., job_id: Any | None = ..., pool: Any | None = ..., session: Any | None = ...) -> None: ...
    def dry_run(self) -> None: ...
    def handle_failure(self, error, test_mode: Any | None = ..., context: Any | None = ..., force_fail: bool = ..., session: Any | None = ...) -> None: ...
    def is_eligible_to_retry(self): ...
    var: Any
    def get_template_context(self, session: Any | None = ...): ...
    def get_rendered_template_fields(self) -> None: ...
    def overwrite_params_with_dag_run_conf(self, params, dag_run) -> None: ...
    def render_templates(self, context: Any | None = ...) -> None: ...
    def email_alert(self, exception): ...
    def set_duration(self) -> None: ...
    def xcom_push(self, key, value, execution_date: Any | None = ...) -> None: ...
    def xcom_pull(self, task_ids: Any | None = ..., dag_id: Any | None = ..., key=..., include_prior_dates: bool = ...): ...
    def get_num_running_task_instances(self, session): ...
    def init_run_context(self, raw: bool = ...) -> None: ...
