from airflow.models import TaskInstance as TaskInstance
from airflow.models.baseoperator import BaseOperator as BaseOperator, BaseOperatorLink as BaseOperatorLink
from airflow.utils.decorators import apply_defaults as apply_defaults
from typing import Any

def skipUnlessImported(module, obj): ...
def assertEqualIgnoreMultipleSpaces(case, first, second, msg: Any | None = ...): ...

class AirflowLink(BaseOperatorLink):
    name: str
    def get_link(self, operator, dttm): ...

class Dummy2TestOperator(BaseOperator):
    operator_extra_links: Any

class Dummy3TestOperator(BaseOperator):
    operator_extra_links: Any

class CustomBaseIndexOpLink(BaseOperatorLink):
    index: int
    @property
    def name(self): ...
    def get_link(self, operator, dttm): ...
    def __init__(self, index) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class CustomOpLink(BaseOperatorLink):
    name: str
    def get_link(self, operator, dttm): ...

class CustomOperator(BaseOperator):
    template_fields: Any
    @property
    def operator_extra_links(self): ...
    bash_command: Any
    def __init__(self, bash_command: Any | None = ..., *args, **kwargs) -> None: ...
    def execute(self, context) -> None: ...

class GoogleLink(BaseOperatorLink):
    name: str
    operators: Any
    def get_link(self, operator, dttm): ...

class AirflowLink2(BaseOperatorLink):
    name: str
    operators: Any
    def get_link(self, operator, dttm): ...

class GithubLink(BaseOperatorLink):
    name: str
    def get_link(self, operator, dttm): ...
