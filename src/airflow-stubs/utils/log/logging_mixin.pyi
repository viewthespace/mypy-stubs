from logging import Logger, StreamHandler
from typing import Any

ANSI_ESCAPE: Any

def remove_escape_codes(text): ...

class LoggingMixin:
    def __init__(self, context: Any | None = ...) -> None: ...
    @property
    def logger(self) -> Logger: ...
    @property
    def log(self) -> Logger: ...

class StreamLogWriter:
    encoding: Any
    logger: Any
    level: Any
    def __init__(self, logger, level) -> None: ...
    @property
    def closed(self): ...
    def write(self, message) -> None: ...
    def flush(self) -> None: ...
    def isatty(self): ...

class RedirectStdHandler(StreamHandler):
    def __init__(self, stream) -> None: ...
    @property
    def stream(self): ...

def redirect_stdout(logger, level) -> None: ...
def redirect_stderr(logger, level) -> None: ...
def set_context(logger, value) -> None: ...
