import multiprocessing
from airflow.executors.base_executor import BaseExecutor as BaseExecutor
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.state import State as State
from typing import Any

class LocalWorker(multiprocessing.Process, LoggingMixin):
    daemon: bool
    result_queue: Any
    key: Any
    command: Any
    def __init__(self, result_queue) -> None: ...
    def execute_work(self, key, command) -> None: ...
    def run(self) -> None: ...

class QueuedLocalWorker(LocalWorker):
    task_queue: Any
    def __init__(self, task_queue, result_queue) -> None: ...
    def run(self) -> None: ...

class LocalExecutor(BaseExecutor):
    class _UnlimitedParallelism:
        executor: Any
        def __init__(self, executor) -> None: ...
        def start(self) -> None: ...
        def execute_async(self, key, command) -> None: ...
        def sync(self) -> None: ...
        def end(self) -> None: ...
    class _LimitedParallelism:
        executor: Any
        def __init__(self, executor) -> None: ...
        queue: Any
        def start(self) -> None: ...
        def execute_async(self, key, command) -> None: ...
        def sync(self) -> None: ...
        def end(self) -> None: ...
    manager: Any
    result_queue: Any
    workers: Any
    workers_used: int
    workers_active: int
    impl: Any
    def start(self) -> None: ...
    def execute_async(self, key, command, queue: Any | None = ..., executor_config: Any | None = ...) -> None: ...
    def sync(self) -> None: ...
    def end(self) -> None: ...
