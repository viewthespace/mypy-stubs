import flask_admin.contrib.sqla.filters as sqlafilters
import wtforms
from airflow import models as models, settings as settings
from airflow.configuration import conf as conf
from airflow.utils import timezone as timezone
from airflow.utils.db import create_session as create_session
from airflow.utils.json import AirflowJsonEncoder as AirflowJsonEncoder
from typing import Any

AUTHENTICATE: Any
DEFAULT_SENSITIVE_VARIABLE_FIELDS: Any

def should_hide_value_for_key(key_name): ...

class LoginMixin:
    def is_accessible(self): ...

class SuperUserMixin:
    def is_accessible(self): ...

class DataProfilingMixin:
    def is_accessible(self): ...

def get_params(**kwargs): ...
def generate_pages(current_page, num_of_pages, search: Any | None = ..., showPaused: Any | None = ..., window: int = ...): ...
def limit_sql(sql, limit, conn_type): ...
def epoch(dttm): ...
def action_logging(f): ...
def notify_owner(f): ...
def json_response(obj): ...
def gzipped(f): ...
def make_cache_key(*args, **kwargs): ...
def get_python_source(x, return_none_if_x_none: bool = ...): ...

class AceEditorWidget(wtforms.widgets.TextArea):
    def __call__(self, field, **kwargs): ...

class UtcDateTimeFilterMixin:
    def clean(self, value): ...

class UtcDateTimeEqualFilter(UtcDateTimeFilterMixin, sqlafilters.DateTimeEqualFilter): ...
class UtcDateTimeNotEqualFilter(UtcDateTimeFilterMixin, sqlafilters.DateTimeNotEqualFilter): ...
class UtcDateTimeGreaterFilter(UtcDateTimeFilterMixin, sqlafilters.DateTimeGreaterFilter): ...
class UtcDateTimeSmallerFilter(UtcDateTimeFilterMixin, sqlafilters.DateTimeSmallerFilter): ...
class UtcDateTimeBetweenFilter(UtcDateTimeFilterMixin, sqlafilters.DateTimeBetweenFilter): ...
class UtcDateTimeNotBetweenFilter(UtcDateTimeFilterMixin, sqlafilters.DateTimeNotBetweenFilter): ...

class UtcFilterConverter(sqlafilters.FilterConverter):
    utcdatetime_filters: Any
    def conv_utcdatetime(self, column, name, **kwargs): ...

def wrapped_markdown(s, css_class: Any | None = ...): ...
