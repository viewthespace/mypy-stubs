from airflow.contrib.hooks.gcp_api_base_hook import GoogleCloudBaseHook as GoogleCloudBaseHook
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.version import version as version
from typing import Any

class _DataProcJob(LoggingMixin):
    dataproc_api: Any
    project_id: Any
    region: Any
    num_retries: Any
    job_error_states: Any
    job: Any
    job_id: Any
    def __init__(self, dataproc_api, project_id, job, region: str = ..., job_error_states: Any | None = ..., num_retries: int = ...) -> None: ...
    def wait_for_done(self): ...
    def raise_error(self, message: Any | None = ...) -> None: ...
    def get(self): ...

class _DataProcJobBuilder:
    job_type: Any
    job: Any
    def __init__(self, project_id, task_id, cluster_name, job_type, properties) -> None: ...
    def add_labels(self, labels) -> None: ...
    def add_variables(self, variables) -> None: ...
    def add_args(self, args) -> None: ...
    def add_query(self, query) -> None: ...
    def add_query_uri(self, query_uri) -> None: ...
    def add_jar_file_uris(self, jars) -> None: ...
    def add_archive_uris(self, archives) -> None: ...
    def add_file_uris(self, files) -> None: ...
    def add_python_file_uris(self, pyfiles) -> None: ...
    def set_main(self, main_jar, main_class) -> None: ...
    def set_python_main(self, main) -> None: ...
    def set_job_name(self, name) -> None: ...
    def build(self): ...

class _DataProcOperation(LoggingMixin):
    dataproc_api: Any
    operation: Any
    operation_name: Any
    num_retries: Any
    def __init__(self, dataproc_api, operation, num_retries) -> None: ...
    def wait_for_done(self): ...
    def get(self): ...

class DataProcHook(GoogleCloudBaseHook):
    api_version: Any
    def __init__(self, gcp_conn_id: str = ..., delegate_to: Any | None = ..., api_version: str = ...) -> None: ...
    def get_conn(self): ...
    def get_cluster(self, project_id, region, cluster_name): ...
    def submit(self, project_id, job, region: str = ..., job_error_states: Any | None = ...) -> None: ...
    def create_job_template(self, task_id, cluster_name, job_type, properties): ...
    def wait(self, operation) -> None: ...
    def cancel(self, project_id, job_id, region: str = ...): ...
