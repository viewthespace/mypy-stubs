from airflow.contrib.hooks.gcp_api_base_hook import GoogleCloudBaseHook as GoogleCloudBaseHook
from airflow.exceptions import AirflowException as AirflowException
from typing import Any

class GoogleCloudStorageHook(GoogleCloudBaseHook):
    def __init__(self, google_cloud_storage_conn_id: str = ..., delegate_to: Any | None = ...) -> None: ...
    def get_conn(self): ...
    def copy(self, source_bucket, source_object, destination_bucket: Any | None = ..., destination_object: Any | None = ...) -> None: ...
    def rewrite(self, source_bucket, source_object, destination_bucket, destination_object: Any | None = ...) -> None: ...
    def download(self, bucket, object, filename: Any | None = ...): ...
    def upload(self, bucket, object, filename, mime_type: str = ..., gzip: bool = ..., multipart: Any | None = ..., num_retries: Any | None = ...) -> None: ...
    def exists(self, bucket, object): ...
    def is_updated_after(self, bucket, object, ts): ...
    def delete(self, bucket, object, generation: Any | None = ...) -> None: ...
    def list(self, bucket, versions: Any | None = ..., maxResults: Any | None = ..., prefix: Any | None = ..., delimiter: Any | None = ...): ...
    def get_size(self, bucket, object): ...
    def get_crc32c(self, bucket, object): ...
    def get_md5hash(self, bucket, object): ...
    def create_bucket(self, bucket_name, resource: Any | None = ..., storage_class: str = ..., location: str = ..., project_id: Any | None = ..., labels: Any | None = ...): ...
    def insert_bucket_acl(self, bucket, entity, role, user_project: Any | None = ...) -> None: ...
    def insert_object_acl(self, bucket, object_name, entity, role, generation: Any | None = ..., user_project: Any | None = ...) -> None: ...
    def compose(self, bucket, source_objects, destination_object, num_retries: Any | None = ...) -> None: ...
