from airflow.contrib.hooks.qubole_check_hook import QuboleCheckHook as QuboleCheckHook
from airflow.contrib.operators.qubole_operator import QuboleOperator as QuboleOperator
from airflow.exceptions import AirflowException as AirflowException
from airflow.operators.check_operator import CheckOperator as CheckOperator, ValueCheckOperator as ValueCheckOperator
from airflow.utils.decorators import apply_defaults as apply_defaults
from typing import Any

class QuboleCheckOperator(CheckOperator, QuboleOperator):
    template_fields: Any
    template_ext: Any
    ui_fgcolor: str
    on_failure_callback: Any
    on_retry_callback: Any
    def __init__(self, qubole_conn_id: str = ..., *args, **kwargs) -> None: ...
    hook: Any
    def execute(self, context: Any | None = ...) -> None: ...
    def get_db_hook(self): ...
    def get_hook(self, context: Any | None = ...): ...
    def __getattribute__(self, name): ...
    def __setattr__(self, name, value) -> None: ...

class QuboleValueCheckOperator(ValueCheckOperator, QuboleOperator):
    template_fields: Any
    template_ext: Any
    ui_fgcolor: str
    on_failure_callback: Any
    on_retry_callback: Any
    def __init__(self, pass_value, tolerance: Any | None = ..., qubole_conn_id: str = ..., *args, **kwargs) -> None: ...
    hook: Any
    def execute(self, context: Any | None = ...) -> None: ...
    def get_db_hook(self): ...
    def get_hook(self, context: Any | None = ...): ...
    def __getattribute__(self, name): ...
    def __setattr__(self, name, value) -> None: ...

def get_sql_from_qbol_cmd(params): ...
def handle_airflow_exception(airflow_exception, hook) -> None: ...
