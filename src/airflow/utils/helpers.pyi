from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from typing import Any

DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM: Any
KEY_REGEX: Any

def validate_key(k, max_length: int = ...): ...
def alchemy_to_dict(obj): ...
def ask_yesno(question): ...
def is_container(obj): ...
def as_tuple(obj): ...
def chunks(items, chunk_size) -> None: ...
def reduce_in_chunks(fn, iterable, initializer, chunk_size: int = ...): ...
def as_flattened_list(iterable): ...
def chain(*tasks) -> None: ...
def cross_downstream(from_tasks, to_tasks) -> None: ...
def pprinttable(rows): ...
def reap_process_group(pgid, log, sig=..., timeout=...): ...
def parse_template_string(template_string): ...

class AirflowImporter:
    def __init__(self, parent_module, module_attributes) -> None: ...
    def __getattr__(self, attribute): ...

def render_log_filename(ti, try_number, filename_template): ...
def convert_camel_to_snake(camel_str): ...
