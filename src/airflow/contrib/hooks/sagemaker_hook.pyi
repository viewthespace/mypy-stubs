from airflow.contrib.hooks.aws_hook import AwsHook as AwsHook
from airflow.contrib.hooks.aws_logs_hook import AwsLogsHook as AwsLogsHook
from airflow.exceptions import AirflowException as AirflowException
from airflow.hooks.S3_hook import S3Hook as S3Hook
from airflow.utils import timezone as timezone
from typing import Any, NamedTuple

class LogState:
    STARTING: int
    WAIT_IN_PROGRESS: int
    TAILING: int
    JOB_COMPLETE: int
    COMPLETE: int

class Position(NamedTuple):
    timestamp: Any
    skip: Any

def argmin(arr, f): ...
def secondary_training_status_changed(current_job_description, prev_job_description): ...
def secondary_training_status_message(job_description, prev_description): ...

class SageMakerHook(AwsHook):
    non_terminal_states: Any
    endpoint_non_terminal_states: Any
    failed_states: Any
    s3_hook: Any
    logs_hook: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def tar_and_s3_upload(self, path, key, bucket) -> None: ...
    def configure_s3_resources(self, config) -> None: ...
    def check_s3_url(self, s3url): ...
    def check_training_config(self, training_config) -> None: ...
    def check_tuning_config(self, tuning_config) -> None: ...
    def get_conn(self): ...
    def get_log_conn(self): ...
    def log_stream(self, log_group, stream_name, start_time: int = ..., skip: int = ...): ...
    def multi_stream_iter(self, log_group, streams, positions: Any | None = ...): ...
    def create_training_job(self, config, wait_for_completion: bool = ..., print_log: bool = ..., check_interval: int = ..., max_ingestion_time: Any | None = ...): ...
    def create_tuning_job(self, config, wait_for_completion: bool = ..., check_interval: int = ..., max_ingestion_time: Any | None = ...): ...
    def create_transform_job(self, config, wait_for_completion: bool = ..., check_interval: int = ..., max_ingestion_time: Any | None = ...): ...
    def create_model(self, config): ...
    def create_endpoint_config(self, config): ...
    def create_endpoint(self, config, wait_for_completion: bool = ..., check_interval: int = ..., max_ingestion_time: Any | None = ...): ...
    def update_endpoint(self, config, wait_for_completion: bool = ..., check_interval: int = ..., max_ingestion_time: Any | None = ...): ...
    def describe_training_job(self, name): ...
    def describe_training_job_with_log(self, job_name, positions, stream_names, instance_count, state, last_description, last_describe_job_call): ...
    def describe_tuning_job(self, name): ...
    def describe_model(self, name): ...
    def describe_transform_job(self, name): ...
    def describe_endpoint_config(self, name): ...
    def describe_endpoint(self, name): ...
    def check_status(self, job_name, key, describe_function, check_interval, max_ingestion_time, non_terminal_states: Any | None = ...): ...
    def check_training_status_with_log(self, job_name, non_terminal_states, failed_states, wait_for_completion, check_interval, max_ingestion_time) -> None: ...
