from airflow import AirflowException as AirflowException, settings as settings
from airflow.contrib.kubernetes.pod import Pod as Pod
from airflow.kubernetes.kube_client import get_kube_client as get_kube_client
from airflow.kubernetes.pod_generator import PodDefaults as PodDefaults, PodGenerator as PodGenerator
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.state import State as State
from typing import Any

class PodStatus:
    PENDING: str
    RUNNING: str
    FAILED: str
    SUCCEEDED: str

class PodLauncher(LoggingMixin):
    extract_xcom: Any
    def __init__(self, kube_client: Any | None = ..., in_cluster: bool = ..., cluster_context: Any | None = ..., extract_xcom: bool = ...) -> None: ...
    def run_pod_async(self, pod, **kwargs): ...
    def delete_pod(self, pod) -> None: ...
    def start_pod(self, pod, startup_timeout) -> None: ...
    def monitor_pod(self, pod, get_logs): ...
    def pod_not_started(self, pod): ...
    def pod_is_running(self, pod): ...
    def base_container_is_running(self, pod): ...
    def read_pod_logs(self, pod, tail_lines: int = ...): ...
    def read_pod_events(self, pod): ...
    def read_pod(self, pod): ...
    def process_status(self, job_id, status): ...
